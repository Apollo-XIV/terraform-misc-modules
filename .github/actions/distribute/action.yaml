name: Distribute Changes
description: Distribute the changes in modules to their respective modules
inputs:
  module:
    description: which module/folder to distribute
    required: true
  PERSONAL_ACCESS_TOKEN:
    description: PAT used to auth github requests
    required: true
runs:
  using: "composite"
  steps:
    - name: Check if repository exists
      id: check_repo
      shell: bash
      run: |
        REPO_NAME="terraform-${{inputs.module}}"
        RESPONSE=$(gh repo view Apollo-XIV/$REPO_NAME --json name --jq .name 2>/dev/null || echo "not found")
        echo "Repository status: $RESPONSE"
        if [ "$RESPONSE" = "not found" ]; then
          echo "repo_exists=false" >> $GITHUB_ENV
        else
          echo "repo_exists=true" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{inputs.PERSONAL_ACCESS_TOKEN}}

    - name: Create repository if it does not exist
      if: ${{env.repo_exists}} == 'false'
      shell: bash
      run: |
        gh repo create Apollo-XIV/terraform-${{inputs.module}} --public
      env:
        GH_TOKEN: ${{ inputs.PERSONAL_ACCESS_TOKEN }}

  # validate-code:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - check-changes
  #   steps:
  #     - uses: actions/checkout@v4

  
    - name: Checkout main repository
      uses: actions/checkout@v4

    - name: Set up Git
      shell: bash
      run: |
        git config --unset-all http.https://github.com/.extraheader
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase false

    - name: Fetch
      shell: bash
      run: git fetch --prune --unshallow

    
    - name: Copy Module Files
      shell: bash
      run: |
        cp -r ${{ inputs.module }} git-${{inputs.module}}
        mkdir -p git-${{inputs.module}}/.github/workflows
        cp release-template.yaml git-${{inputs.module}}/.github/workflows/release.yaml

    ## Idempotently Create Repo
        
    - name: Git Init
      shell: bash
      run: |
        cd git-${{inputs.module}} 
        git init

    - name: Push changes
      shell: bash
      run: |
        cd git-${{inputs.module}} 
        git branch -m main
        # git checkout main
        git add .
        git commit -m 'chore: distribute module'
        git push --force -u ${{inputs.module}} main

    - name: Clean up remotes
      shell: bash
      run: | 
        cd git-${{inputs.module}} 
        git remote remove ${{inputs.module}}

