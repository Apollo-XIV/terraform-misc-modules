name: Distribute Changes

on: 
  workflow_call:
    inputs:
      module:
        required: true
        type: true
  # push:
  #   branches:
  #     - main

jobs:
  check-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --unset-all http.https://github.com/.extraheader
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config pull.rebase false

      - name: Fetch
        run: git fetch --prune --unshallow
      
      - name: Determine changes in folder
        id: changes
        run: |
          # Check if there are any changes in the specified folder
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Check if any file in the specified folder has changed
          if echo "$CHANGED_FILES" | grep -q "^${{ matrix.module }}/"; then
            echo "Files changed in ${{ matrix.module }}"
            echo "folder_changed=true" >> $GITHUB_ENV
          else
            echo "No files changed in ${{ matrix.module }}"
            echo "folder_changed=false" >> $GITHUB_ENV
          fi
  
  prepare-repo:
    runs-on: ubuntu-latest
    if: env.folder_changed == 'true'
    needs: check-changes
    steps:
      - name: Check if repository exists
        id: check_repo
        run: |
          REPO_NAME="terraform-${{matrix.module}}"
          RESPONSE=$(gh repo view Apollo-XIV/$REPO_NAME --json name --jq .name 2>/dev/null || echo "not found")
          echo "Repository status: $RESPONSE"
          if [ "$RESPONSE" = "not found" ]; then
            echo "repo_exists=false" >> $GITHUB_ENV
          else
            echo "repo_exists=true" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      - name: Create repository if it does not exist
        if: env.repo_exists == 'false'
        run: |
          gh repo create Apollo-XIV/terraform-${{matrix.module}} --public
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  
  distribute-module:
    runs-on: ubuntu-latest
    if: env.folder_changed == 'true'
    needs: prepare-repo
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --unset-all http.https://github.com/.extraheader
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config pull.rebase false

      - name: Fetch
        run: git fetch --prune --unshallow

      
      - name: Copy Module Files
        if: env.folder_changed == 'true'
        run: |
          cp -r ${{ matrix.module }} git-${{matrix.module}}
          mkdir -p git-${{matrix.module}}/.github/workflows
          cp release-template.yaml git-${{matrix.module}}/.github/workflows/release.yaml

      ## Idempotently Create Repo
          
      - name: Git Init
        if: env.folder_changed == 'true'
        run: |
          cd git-${{matrix.module}} 
          git init

      - name: Push changes
        if: env.folder_changed == 'true'
        run: |
          cd git-${{matrix.module}} 
          git branch -m main
          # git checkout main
          git add .
          git commit -m 'chore: distribute module'
          git push --force -u ${{matrix.module}} main

      - name: Clean up remotes
        if: env.folder_changed == 'true'
        run: | 
          cd git-${{matrix.module}} 
          git remote remove ${{matrix.module}}

      # - name: Pull from target repo with --allow-unrelated-histories
      #   run: |
      #     git pull --allow-unrelated-histories ${{matrix.module}} main

      # - name: Add or update the subtree
        # run: |
          # git subtree add --prefix=${{matrix.module}} ${{matrix.module}} main --squash || git subtree pull --prefix=${{matrix.module}} ${{matrix.module}} main --squash

      # - name: Push changes back to target repo
      #   run: |
      #     git push ${{matrix.module}} HEAD:main

