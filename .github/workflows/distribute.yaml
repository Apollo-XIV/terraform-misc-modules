name: Distribute Changes
on: 
  workflow_call:
    inputs:
      module:
        required: true
        type: string
jobs:
  prepare-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Check if repository exists
        id: check_repo
        run: |
          REPO_NAME="terraform-${{inputs.module}}"
          RESPONSE=$(gh repo view Apollo-XIV/$REPO_NAME --json name --jq .name 2>/dev/null || echo "not found")
          echo "Repository status: $RESPONSE"
          if [ "$RESPONSE" = "not found" ]; then
            echo "repo_exists=false" >> $GITHUB_ENV
          else
            echo "repo_exists=true" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      - name: Create repository if it does not exist
        if: ${{ env.repo_exists }} == 'false'
        run: |
          gh repo create Apollo-XIV/terraform-${{inputs.module}} --public
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # validate-code:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - check-changes
  #   steps:
  #     - uses: actions/checkout@v4

  
  distribute-module:
    runs-on: ubuntu-latest
    needs: 
      - prepare-repo
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --unset-all http.https://github.com/.extraheader
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config pull.rebase false

      - name: Fetch
        run: git fetch --prune --unshallow

      
      - name: Copy Module Files
        run: |
          cp -r ${{ inputs.module }} git-${{inputs.module}}
          mkdir -p git-${{inputs.module}}/.github/workflows
          cp release-template.yaml git-${{inputs.module}}/.github/workflows/release.yaml

      ## Idempotently Create Repo
          
      - name: Git Init
        run: |
          cd git-${{inputs.module}} 
          git init

      - name: Push changes
        run: |
          cd git-${{inputs.module}} 
          git branch -m main
          # git checkout main
          git add .
          git commit -m 'chore: distribute module'
          git push --force -u ${{inputs.module}} main

      - name: Clean up remotes
        run: | 
          cd git-${{inputs.module}} 
          git remote remove ${{inputs.module}}

