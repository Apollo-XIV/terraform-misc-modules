name: Release
on:
  push:
    branches:
      - main


jobs:
  create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch tags
        continue-on-error: true
        run: git fetch --tags

      - name: Get latest tag
        continue-on-error: true
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --always --abbrev=0)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Calculate next version
        id: calc_version
        run: |
          if [ -z "$GITHUB_ENV" ]; then
            echo "No tags found, setting version to v0.1.0"
            new_version="v0.1.0"
          else
            latest_version="${GITHUB_ENV#v}"
            major=$(echo "$latest_version" | cut -d'.' -f1)
            minor=$(echo "$latest_version" | cut -d'.' -f2)
            patch=$(echo "$latest_version" | cut -d'.' -f3)
            new_version="v$major.$minor.$((patch + 1))"
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.calc_version.outputs.new_version }}
          release_name: "Release ${{ steps.calc_version.outputs.new_version }}"
          body: "Automated release for version ${{ steps.calc_version.outputs.new_version }}."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
